<!DOCTYPE html>
<html>
<head>
  <title>Cybadigitals</title>
  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/site.css">
  <link rel="stylesheet" href="/styles/ghpages-materialize.css">
  <!--<link rel="stylesheet" href="/styles/materialize.min.css">-->
  <!--STYLES END-->
</head>

<body data-twttr-rendered="true">
<header>
  <nav class="top-nav">
    <div class="container">
      <div class="nav-wrapper"><a class="page-title">CybaDigitals</a></div>
    </div>
  </nav>
  <div class="container">
    <a href="#" data-activates="nav-mobile"
                            class="button-collapse top-nav full hide-on-large-only">
      <i class="mdi-navigation-menu"></i>
    </a>
  </div>
  <ul style="left: 0px;" id="nav-mobile" class="side-nav fixed">
    <li class="logo"><h4>Categories</h4></li>
    <li class="bold"><a href="/architectural-designs" class="waves-effect waves-teal">Architectural</a></li>
    <li class="bold"><a href="/educational-designs" class="waves-effect waves-teal">Educational</a></li>
    <li class="bold"><a href="/accessories" class="waves-effect waves-teal">Accessories</a>
    </li>
  </ul>
</header>
<main>
  <%- body %>
</main>
<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->

<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->
<!--SCRIPTS-->
<script src="/js/dependencies/sails.io.js"></script>
<script src="/js/jquery.min.js"></script>
<script src="/js/materialize.js"></script>
<script src="/js/materialize.min.js"></script>
<!--SCRIPTS END-->
</body>
</html>
